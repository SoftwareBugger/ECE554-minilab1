
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module minilab1_proj(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output	reg	     [6:0]		HEX0,
	output	reg	     [6:0]		HEX1,
	output	reg	     [6:0]		HEX2,
	output	reg	     [6:0]		HEX3,
	output	reg	     [6:0]		HEX4,
	output	reg	     [6:0]		HEX5,
	
	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW
);

localparam DATA_WIDTH = 8;
localparam DEPTH = 8;

localparam FILL = 2'd0;
localparam EXEC = 2'd1;
localparam DONE = 2'd2;

parameter HEX_0 = 7'b1000000;		// zero
parameter HEX_1 = 7'b1111001;		// one
parameter HEX_2 = 7'b0100100;		// two
parameter HEX_3 = 7'b0110000;		// three
parameter HEX_4 = 7'b0011001;		// four
parameter HEX_5 = 7'b0010010;		// five
parameter HEX_6 = 7'b0000010;		// six
parameter HEX_7 = 7'b1111000;		// seven
parameter HEX_8 = 7'b0000000;		// eight
parameter HEX_9 = 7'b0011000;		// nine
parameter HEX_10 = 7'b0001000;	// ten
parameter HEX_11 = 7'b0000011;	// eleven
parameter HEX_12 = 7'b1000110;	// twelve
parameter HEX_13 = 7'b0100001;	// thirteen
parameter HEX_14 = 7'b0000110;	// fourteen
parameter HEX_15 = 7'b0001110;	// fifteen
parameter OFF   = 7'b1111111;		// all off


logic clk, rst_n, start, done, SW_FF;

logic [23:0] C [7:0];
logic [6:0] HEXs [5:0]

assign clk = CLOCK_50;
assign rst_n = KEY[0];
assign start = ~SW[9]  & SW_FF;

always_ff @(posedge clk, negedge rst_n) begin
	if (!rst_n) SW_FF <= 0;
	else SW_FF <= SW[9];
end


//Instantiate top level
top minilab1(.clk(clk), .rst_n(rst_n), .start(start), .done(done), .C(C));

for (int i = 0; i < 6; i++) begin
	case (C[{SW[3], SW[2], SW[1]}][i+3:i]) 
		4'b1111: begin
			HEXs[i] = HEX_15;
		end
		4'b1110: begin
			HEXs[i] = HEX_14;
		end
		4'b1101: begin
			HEXs[i] = HEX_13;
		end
		4'b1100: begin
			HEXs[i] = HEX_12;
		end
		4'b1011: begin
			HEXs[i] = HEX_11;
		end
		4'b1010: begin
			HEXs[i] = HEX_10;
		end
		4'b1001: begin
			HEXs[i] = HEX_9;
		end
		4'b1000: begin
			HEXs[i] = HEX_8;
		end
		4'b0111: begin
			HEXs[i] = HEX_7;
		end
		4'b0110: begin
			HEXs[i] = HEX_6;
		end
		4'b0101: begin
			HEXs[i] = HEX_5;
		end
		4'b0100: begin
			HEXs[i] = HEX_4;
		end
		4'b0011: begin
			HEXs[i] = HEX_3;
		end
		4'b0010: begin
			HEXs[i] = HEX_2;
		end
		4'b0001: begin
			HEXs[i] = HEX_1;
		end
		default: begin
			HEXs[i] = HEX_0;
		end
	endcase
end




endmodule
